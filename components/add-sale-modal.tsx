"use client"

import { useState, useEffect } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Plus } from "lucide-react"
import { supabase } from "@/lib/supabase"
import { createSale } from "@/lib/actions"
import { useToast } from "@/hooks/use-toast"
import type { Purchase } from "@/lib/supabase"

export function AddSaleModal() {
  const [open, setOpen] = useState(false)
  const [loading, setLoading] = useState(false)
  const [purchases, setPurchases] = useState<Purchase[]>([])
  const [selectedPurchase, setSelectedPurchase] = useState<Purchase | null>(null)
  const [formData, setFormData] = useState({
    total_price: "",
    shipping_fee: "0",
    amount_paid: "",
  })
  const { toast } = useToast()

  useEffect(() => {
    if (open) {
      fetchPurchases()
    }
  }, [open])

  const fetchPurchases = async () => {
    const { data, error } = await supabase
      .from("purchases")
      .select("*")
      .gt("remaining_quantity", 0)
      .order("product_name")

    if (error) {
      console.error("Error fetching purchases:", error)
      toast({
        title: "‚ùå L·ªói",
        description: "Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m",
        variant: "destructive",
      })
      return
    }

    setPurchases(data || [])
  }

  const handlePurchaseSelect = (purchaseId: string) => {
    const purchase = purchases.find((p) => p.id === purchaseId)
    setSelectedPurchase(purchase || null)
  }

  const handleSubmit = async (formData: FormData) => {
    setLoading(true)

    try {
      const result = await createSale(formData)

      if (result.success) {
        toast({
          title: "‚úÖ Th√†nh c√¥ng!",
          description: "ƒê√£ th√™m ƒë∆°n b√°n h√†ng m·ªõi",
          duration: 3000,
        })
        setSelectedPurchase(null)
        setFormData({ total_price: "", shipping_fee: "0", amount_paid: "" })
        setOpen(false)
      } else {
        toast({
          title: "‚ùå L·ªói",
          description: result.error,
          variant: "destructive",
          duration: 5000,
        })
      }
    } catch (error) {
      console.error("Error:", error)
      toast({
        title: "‚ùå L·ªói h·ªá th·ªëng",
        description: "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i",
        variant: "destructive",
        duration: 5000,
      })
    } finally {
      setLoading(false)
    }
  }

  const totalPrice = Number.parseInt(formData.total_price) || 0
  const shippingFee = Number.parseInt(formData.shipping_fee) || 0
  const totalAmount = totalPrice + shippingFee
  const amountPaid = Number.parseInt(formData.amount_paid) || 0
  const amountRemaining = totalAmount - amountPaid

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>
          <Plus className="h-4 w-4 mr-2" />
          Th√™m ƒë∆°n b√°n h√†ng
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[600px] max-h-[85vh] overflow-hidden flex flex-col">
        <DialogHeader className="flex-shrink-0">
          <DialogTitle>Th√™m ƒë∆°n b√°n h√†ng</DialogTitle>
          <DialogDescription>ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v·ªÅ ƒë∆°n h√†ng b√°n ra</DialogDescription>
        </DialogHeader>

        <div className="flex-1 overflow-y-auto pr-2">
          <form action={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="purchase_id">Ch·ªçn s·∫£n ph·∫©m *</Label>
              <Select name="purchase_id" onValueChange={handlePurchaseSelect} required>
                <SelectTrigger>
                  <SelectValue placeholder="Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ b√°n" />
                </SelectTrigger>
                <SelectContent>
                  {purchases.map((purchase) => (
                    <SelectItem key={purchase.id} value={purchase.id}>
                      {purchase.product_name} - C√≤n: {purchase.remaining_quantity} {purchase.unit}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {selectedPurchase && (
              <div className="p-3 bg-muted rounded-lg text-sm">
                <p className="font-medium">{selectedPurchase.product_name}</p>
                <p className="text-muted-foreground">
                  C√≤n l·∫°i: {selectedPurchase.remaining_quantity} {selectedPurchase.unit} ‚Ä¢ Gi√° nh·∫≠p:{" "}
                  {(selectedPurchase.total_cost / selectedPurchase.quantity).toLocaleString("vi-VN")}ƒë/
                  {selectedPurchase.unit}
                  {selectedPurchase.supplier_name && <span> ‚Ä¢ NCC: {selectedPurchase.supplier_name}</span>}
                </p>
              </div>
            )}

            <div className="grid gap-4 md:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="customer_name">T√™n kh√°ch h√†ng</Label>
                <Input id="customer_name" name="customer_name" placeholder="T√™n kh√°ch h√†ng" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="delivery_method">Ph∆∞∆°ng th·ª©c giao h√†ng</Label>
                <Select name="delivery_method" defaultValue="pickup">
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="pickup">üè™ T·ª± l·∫•y</SelectItem>
                    <SelectItem value="delivery">üöö Giao h√†ng</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid gap-4 md:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="quantity">S·ªë l∆∞·ª£ng b√°n *</Label>
                <Input
                  id="quantity"
                  name="quantity"
                  type="number"
                  step="0.01"
                  placeholder="0"
                  max={selectedPurchase?.remaining_quantity || undefined}
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="total_price">Gi√° b√°n (VNƒê) *</Label>
                <Input
                  id="total_price"
                  name="total_price"
                  type="number"
                  placeholder="0"
                  value={formData.total_price}
                  onChange={(e) => setFormData((prev) => ({ ...prev, total_price: e.target.value }))}
                  required
                />
              </div>
            </div>

            <div className="grid gap-4 md:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="shipping_fee">Ph√≠ ship (VNƒê)</Label>
                <Input
                  id="shipping_fee"
                  name="shipping_fee"
                  type="number"
                  placeholder="0"
                  value={formData.shipping_fee}
                  onChange={(e) => setFormData((prev) => ({ ...prev, shipping_fee: e.target.value }))}
                />
                <p className="text-xs text-muted-foreground">√Çm (-): Chi ph√≠ ship | D∆∞∆°ng (+): Thu ph√≠ ship t·ª´ kh√°ch</p>
              </div>
              <div className="space-y-2">
                <Label htmlFor="amount_paid">S·ªë ti·ªÅn ƒë√£ tr·∫£ (VNƒê)</Label>
                <Input
                  id="amount_paid"
                  name="amount_paid"
                  type="number"
                  placeholder="0"
                  value={formData.amount_paid}
                  onChange={(e) => setFormData((prev) => ({ ...prev, amount_paid: e.target.value }))}
                />
              </div>
            </div>

            {totalAmount > 0 && (
              <div className="p-4 bg-blue-50 rounded-lg">
                <h4 className="font-medium text-blue-800 mb-2">T·ªïng k·∫øt thanh to√°n</h4>
                <div className="space-y-1 text-sm">
                  <div className="flex justify-between">
                    <span>Gi√° b√°n:</span>
                    <span>{totalPrice.toLocaleString("vi-VN")}ƒë</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Ph√≠ ship:</span>
                    <span className={shippingFee >= 0 ? "text-green-600" : "text-red-600"}>
                      {shippingFee >= 0 ? "+" : ""}
                      {shippingFee.toLocaleString("vi-VN")}ƒë
                    </span>
                  </div>
                  <hr className="my-2" />
                  <div className="flex justify-between font-medium">
                    <span>T·ªïng c·ªông:</span>
                    <span>{totalAmount.toLocaleString("vi-VN")}ƒë</span>
                  </div>
                  <div className="flex justify-between text-green-600">
                    <span>ƒê√£ tr·∫£:</span>
                    <span>{amountPaid.toLocaleString("vi-VN")}ƒë</span>
                  </div>
                  {amountRemaining > 0 && (
                    <div className="flex justify-between text-red-600 font-medium">
                      <span>C√≤n l·∫°i:</span>
                      <span>{amountRemaining.toLocaleString("vi-VN")}ƒë</span>
                    </div>
                  )}
                  {amountRemaining < 0 && (
                    <div className="flex justify-between text-green-600 font-medium">
                      <span>Th·ª´a tr·∫£:</span>
                      <span>{Math.abs(amountRemaining).toLocaleString("vi-VN")}ƒë</span>
                    </div>
                  )}
                </div>
              </div>
            )}

            <div className="space-y-2">
              <Label htmlFor="sale_date">Ng√†y b√°n *</Label>
              <Input
                id="sale_date"
                name="sale_date"
                type="date"
                defaultValue={new Date().toISOString().split("T")[0]}
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="notes">Ghi ch√∫</Label>
              <Textarea id="notes" name="notes" placeholder="Ghi ch√∫ v·ªÅ ƒë∆°n h√†ng..." rows={2} />
            </div>

            <div className="flex gap-4 pt-4">
              <Button type="submit" disabled={loading || !selectedPurchase}>
                {loading ? "ƒêang t·∫°o..." : "T·∫°o ƒë∆°n b√°n h√†ng"}
              </Button>
              <Button type="button" variant="outline" onClick={() => setOpen(false)}>
                H·ªßy
              </Button>
            </div>
          </form>
        </div>
      </DialogContent>
    </Dialog>
  )
}
